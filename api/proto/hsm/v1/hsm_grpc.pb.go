// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: hsm/v1/hsm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HSMAgent_GetInfo_FullMethodName      = "/hsm.v1.HSMAgent/GetInfo"
	HSMAgent_ReadSecret_FullMethodName   = "/hsm.v1.HSMAgent/ReadSecret"
	HSMAgent_WriteSecret_FullMethodName  = "/hsm.v1.HSMAgent/WriteSecret"
	HSMAgent_ReadMetadata_FullMethodName = "/hsm.v1.HSMAgent/ReadMetadata"
	HSMAgent_DeleteSecret_FullMethodName = "/hsm.v1.HSMAgent/DeleteSecret"
	HSMAgent_ListSecrets_FullMethodName  = "/hsm.v1.HSMAgent/ListSecrets"
	HSMAgent_GetChecksum_FullMethodName  = "/hsm.v1.HSMAgent/GetChecksum"
	HSMAgent_IsConnected_FullMethodName  = "/hsm.v1.HSMAgent/IsConnected"
	HSMAgent_Health_FullMethodName       = "/hsm.v1.HSMAgent/Health"
)

// HSMAgentClient is the client API for HSMAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HSMAgent service provides HSM operations via gRPC
type HSMAgentClient interface {
	// GetInfo returns information about the HSM device
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// ReadSecret reads secret data from the specified HSM path
	ReadSecret(ctx context.Context, in *ReadSecretRequest, opts ...grpc.CallOption) (*ReadSecretResponse, error)
	// WriteSecret writes secret data and metadata to the specified HSM path
	WriteSecret(ctx context.Context, in *WriteSecretRequest, opts ...grpc.CallOption) (*WriteSecretResponse, error)
	// ReadMetadata reads metadata for a secret at the given path
	ReadMetadata(ctx context.Context, in *ReadMetadataRequest, opts ...grpc.CallOption) (*ReadMetadataResponse, error)
	// DeleteSecret removes secret data from the specified HSM path
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	// ListSecrets returns a list of secret paths
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	// GetChecksum returns the SHA256 checksum of the secret data at the given path
	GetChecksum(ctx context.Context, in *GetChecksumRequest, opts ...grpc.CallOption) (*GetChecksumResponse, error)
	// IsConnected returns true if the HSM is connected and responsive
	IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error)
	// Health check for gRPC health protocol
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type hSMAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewHSMAgentClient(cc grpc.ClientConnInterface) HSMAgentClient {
	return &hSMAgentClient{cc}
}

func (c *hSMAgentClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, HSMAgent_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) ReadSecret(ctx context.Context, in *ReadSecretRequest, opts ...grpc.CallOption) (*ReadSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadSecretResponse)
	err := c.cc.Invoke(ctx, HSMAgent_ReadSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) WriteSecret(ctx context.Context, in *WriteSecretRequest, opts ...grpc.CallOption) (*WriteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteSecretResponse)
	err := c.cc.Invoke(ctx, HSMAgent_WriteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) ReadMetadata(ctx context.Context, in *ReadMetadataRequest, opts ...grpc.CallOption) (*ReadMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadMetadataResponse)
	err := c.cc.Invoke(ctx, HSMAgent_ReadMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, HSMAgent_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsResponse)
	err := c.cc.Invoke(ctx, HSMAgent_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) GetChecksum(ctx context.Context, in *GetChecksumRequest, opts ...grpc.CallOption) (*GetChecksumResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChecksumResponse)
	err := c.cc.Invoke(ctx, HSMAgent_GetChecksum_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsConnectedResponse)
	err := c.cc.Invoke(ctx, HSMAgent_IsConnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSMAgentClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, HSMAgent_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HSMAgentServer is the server API for HSMAgent service.
// All implementations must embed UnimplementedHSMAgentServer
// for forward compatibility.
//
// HSMAgent service provides HSM operations via gRPC
type HSMAgentServer interface {
	// GetInfo returns information about the HSM device
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// ReadSecret reads secret data from the specified HSM path
	ReadSecret(context.Context, *ReadSecretRequest) (*ReadSecretResponse, error)
	// WriteSecret writes secret data and metadata to the specified HSM path
	WriteSecret(context.Context, *WriteSecretRequest) (*WriteSecretResponse, error)
	// ReadMetadata reads metadata for a secret at the given path
	ReadMetadata(context.Context, *ReadMetadataRequest) (*ReadMetadataResponse, error)
	// DeleteSecret removes secret data from the specified HSM path
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// ListSecrets returns a list of secret paths
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	// GetChecksum returns the SHA256 checksum of the secret data at the given path
	GetChecksum(context.Context, *GetChecksumRequest) (*GetChecksumResponse, error)
	// IsConnected returns true if the HSM is connected and responsive
	IsConnected(context.Context, *IsConnectedRequest) (*IsConnectedResponse, error)
	// Health check for gRPC health protocol
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedHSMAgentServer()
}

// UnimplementedHSMAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHSMAgentServer struct{}

func (UnimplementedHSMAgentServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedHSMAgentServer) ReadSecret(context.Context, *ReadSecretRequest) (*ReadSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSecret not implemented")
}
func (UnimplementedHSMAgentServer) WriteSecret(context.Context, *WriteSecretRequest) (*WriteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSecret not implemented")
}
func (UnimplementedHSMAgentServer) ReadMetadata(context.Context, *ReadMetadataRequest) (*ReadMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMetadata not implemented")
}
func (UnimplementedHSMAgentServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedHSMAgentServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedHSMAgentServer) GetChecksum(context.Context, *GetChecksumRequest) (*GetChecksumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChecksum not implemented")
}
func (UnimplementedHSMAgentServer) IsConnected(context.Context, *IsConnectedRequest) (*IsConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConnected not implemented")
}
func (UnimplementedHSMAgentServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedHSMAgentServer) mustEmbedUnimplementedHSMAgentServer() {}
func (UnimplementedHSMAgentServer) testEmbeddedByValue()                  {}

// UnsafeHSMAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HSMAgentServer will
// result in compilation errors.
type UnsafeHSMAgentServer interface {
	mustEmbedUnimplementedHSMAgentServer()
}

func RegisterHSMAgentServer(s grpc.ServiceRegistrar, srv HSMAgentServer) {
	// If the following call pancis, it indicates UnimplementedHSMAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HSMAgent_ServiceDesc, srv)
}

func _HSMAgent_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_ReadSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).ReadSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_ReadSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).ReadSecret(ctx, req.(*ReadSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_WriteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).WriteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_WriteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).WriteSecret(ctx, req.(*WriteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_ReadMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).ReadMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_ReadMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).ReadMetadata(ctx, req.(*ReadMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_GetChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).GetChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_GetChecksum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).GetChecksum(ctx, req.(*GetChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_IsConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).IsConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_IsConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).IsConnected(ctx, req.(*IsConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSMAgent_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSMAgentServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSMAgent_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSMAgentServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HSMAgent_ServiceDesc is the grpc.ServiceDesc for HSMAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HSMAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hsm.v1.HSMAgent",
	HandlerType: (*HSMAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _HSMAgent_GetInfo_Handler,
		},
		{
			MethodName: "ReadSecret",
			Handler:    _HSMAgent_ReadSecret_Handler,
		},
		{
			MethodName: "WriteSecret",
			Handler:    _HSMAgent_WriteSecret_Handler,
		},
		{
			MethodName: "ReadMetadata",
			Handler:    _HSMAgent_ReadMetadata_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _HSMAgent_DeleteSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _HSMAgent_ListSecrets_Handler,
		},
		{
			MethodName: "GetChecksum",
			Handler:    _HSMAgent_GetChecksum_Handler,
		},
		{
			MethodName: "IsConnected",
			Handler:    _HSMAgent_IsConnected_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _HSMAgent_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hsm/v1/hsm.proto",
}
