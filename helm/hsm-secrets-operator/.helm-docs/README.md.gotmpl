{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

## Prerequisites

- Kubernetes 1.20+
- Helm 3.0+
- (Optional) Prometheus Operator for metrics collection

## Installing the Chart

To install the chart with the release name `{{ template "chart.name" . }}`:

```bash
helm repo add hsm-secrets-operator https://evanjarrett.github.io/hsm-secrets-operator/
helm repo update
helm install {{ template "chart.name" . }} hsm-secrets-operator/{{ template "chart.name" . }}
```

## Uninstalling the Chart

To uninstall/delete the `{{ template "chart.name" . }}` deployment:

```bash
helm uninstall {{ template "chart.name" . }}
```

## Configuration

{{ template "chart.valuesSection" . }}

## Usage Examples

### Basic Installation

```bash
# Install with default settings (mock HSM for testing)
helm install {{ template "chart.name" . }} hsm-secrets-operator/{{ template "chart.name" . }}
```

### Production Installation with PKCS#11

```bash
# Create HSM PIN secret first
kubectl create secret generic hsm-pin --from-literal=pin=your-hsm-pin

# Install with PKCS#11 configuration
helm install {{ template "chart.name" . }} hsm-secrets-operator/{{ template "chart.name" . }} \
  --set hsm.clientType=pkcs11 \
  --set hsm.pkcs11.library=/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so \
  --set hsm.pkcs11.slotId=0
```

### Installation with Resources

```bash
# Install with example resources
helm install {{ template "chart.name" . }} hsm-secrets-operator/{{ template "chart.name" . }} \
  --set hsmsecret.enabled=true \
  --set hsmdevice.enabled=true
```

### Installation with Prometheus Monitoring

```bash
# Install with ServiceMonitor for Prometheus
helm install {{ template "chart.name" . }} hsm-secrets-operator/{{ template "chart.name" . }} \
  --set metrics.serviceMonitor.enabled=true \
  --set metrics.serviceMonitor.namespace=monitoring
```

## Custom Resources

After installation, you can create HSM secrets using the custom resources:

### HSMSecret Example

```yaml
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: database-credentials
  namespace: production
spec:
  hsmPath: "secrets/production/database-credentials"
  secretName: "database-credentials"
  autoSync: true
  syncInterval: 300
  secretType: Opaque
```

### HSMDevice Example

```yaml
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMDevice
metadata:
  name: pico-hsm-discovery
  namespace: {{ template "chart.name" . }}-system
spec:
  deviceType: "pico-hsm"
  discovery:
    usb:
      enabled: true
      vendorId: "1234"
      productId: "5678"
```

## Troubleshooting

### Check Operator Status

```bash
kubectl get deployment {{ template "chart.name" . }}-controller-manager
kubectl logs -f deployment/{{ template "chart.name" . }}-controller-manager
```

### Check Custom Resources

```bash
kubectl get hsmsecrets --all-namespaces
kubectl get hsmdevices --all-namespaces
kubectl describe hsmsecret <name> -n <namespace>
```

### Check Device Discovery

```bash
kubectl get daemonset {{ template "chart.name" . }}-discovery
kubectl logs daemonset/{{ template "chart.name" . }}-discovery
```

## Development

To modify and test the chart:

```bash
# Lint the chart
helm lint ./helm/{{ template "chart.name" . }}

# Test template rendering
helm template {{ template "chart.name" . }} ./helm/{{ template "chart.name" . }}

# Install with dry-run
helm install {{ template "chart.name" . }} ./helm/{{ template "chart.name" . }} --dry-run --debug
```

{{ template "helm-docs.versionFooter" . }}