# Multi-Environment Secret Management
# This example shows how to organize secrets across different environments

---
# Development Environment
apiVersion: v1
kind: Namespace
metadata:
  name: development
  labels:
    environment: development
    hsm.j5t.io/enabled: "true"

---
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: database-credentials
  namespace: development
  labels:
    app: myapp
    environment: development
spec:
  secretName: "database-credentials"
  autoSync: true
  syncInterval: 300  # 5 minutes - frequent sync for dev

---
# Staging Environment
apiVersion: v1
kind: Namespace
metadata:
  name: staging
  labels:
    environment: staging
    hsm.j5t.io/enabled: "true"

---
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: database-credentials
  namespace: staging
  labels:
    app: myapp
    environment: staging
spec:
  secretName: "database-credentials"
  autoSync: true
  syncInterval: 600  # 10 minutes

---
# Production Environment
apiVersion: v1
kind: Namespace
metadata:
  name: production
  labels:
    environment: production
    hsm.j5t.io/enabled: "true"
    security.level: "high"

---
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: database-credentials
  namespace: production
  labels:
    app: myapp
    environment: production
    security.level: "high"
  annotations:
    hsm.j5t.io/description: "Production database credentials - HIGH SECURITY"
spec:
  secretName: "database-credentials"
  autoSync: true
  syncInterval: 1800  # 30 minutes - less frequent for stability

---
# Shared Secrets Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: shared-secrets
  labels:
    purpose: shared
    hsm.j5t.io/enabled: "true"

---
# Shared TLS Certificate (used across environments)
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: wildcard-tls-cert
  namespace: shared-secrets
  labels:
    type: tls
    scope: global
spec:
  secretName: "wildcard-tls"
  autoSync: true
  syncInterval: 86400  # Daily sync for certificates
  secretType: kubernetes.io/tls

---
# RBAC Configuration for Environment Isolation

# Development team access
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: development
  name: dev-hsm-secrets-access
rules:
- apiGroups: ["hsm.j5t.io"]
  resources: ["hsmsecrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dev-team-hsm-access
  namespace: development
subjects:
- kind: Group
  name: development-team
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: dev-hsm-secrets-access
  apiGroup: rbac.authorization.k8s.io

---
# Production team access (more restricted)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: production
  name: prod-hsm-secrets-readonly
rules:
- apiGroups: ["hsm.j5t.io"]
  resources: ["hsmsecrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prod-team-hsm-readonly
  namespace: production
subjects:
- kind: Group
  name: production-team
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: prod-hsm-secrets-readonly
  apiGroup: rbac.authorization.k8s.io

---
# Admin access to shared secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: shared-secrets
  name: shared-secrets-admin
rules:
- apiGroups: ["hsm.j5t.io"]
  resources: ["hsmsecrets"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: platform-team-shared-access
  namespace: shared-secrets
subjects:
- kind: Group
  name: platform-team
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: shared-secrets-admin
  apiGroup: rbac.authorization.k8s.io

---
# Network Policy for Production Environment
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: production-secrets-isolation
  namespace: production
spec:
  podSelector:
    matchLabels:
      security.level: "high"
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          environment: production
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          environment: production
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53