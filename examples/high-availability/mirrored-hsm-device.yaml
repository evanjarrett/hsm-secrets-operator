---
# High Availability HSM Device Configuration
# The operator automatically discovers devices on multiple nodes for HA
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMDevice
metadata:
  name: ha-pico-hsm
  namespace: default
  labels:
    role: production
    environment: production
    ha.enabled: "true"
spec:
  deviceType: PicoHSM
  
  # Discovery configuration
  discovery:
    # USB discovery for Pico HSM
    usb:
      vendorId: "20a0"
      productId: "4230"
  
  # PKCS#11 configuration
  pkcs11:
    libraryPath: "/usr/lib/opensc-pkcs11.so"  # Use OpenSC for Pico HSM
    slotId: 0
    pinSecret:
      name: "pico-hsm-pin"
      key: "pin"
    tokenLabel: "PicoHSM"
  
  # Deploy on nodes with HSM hardware
  nodeSelector:
    hsm.j5t.io/hardware: "available"
    kubernetes.io/arch: "amd64"
  
  # Allow multiple devices for HA
  maxDevices: 3

---
# Service Monitor for Prometheus (if using)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hsm-device-metrics
  namespace: default
  labels:
    app: hsm-secrets-operator
spec:
  selector:
    matchLabels:
      app: hsm-secrets-operator
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# Pod Disruption Budget for HSM operator
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: hsm-operator-pdb
  namespace: hsm-secrets-operator-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      control-plane: controller-manager

---
# Network Policy for HSM Communication
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hsm-operator-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: hsm-secrets-operator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: hsm-client
    ports:
    - protocol: TCP
      port: 8090  # API port
  egress:
  - to: []  # Allow all egress for HSM communication
    ports:
    - protocol: TCP
    - protocol: UDP

---
# Example HSM Secret with HA consideration
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: ha-database-credentials
  namespace: default
  labels:
    app: myapp
    criticality: high
    ha.enabled: "true"
  annotations:
    hsm.j5t.io/description: "HA database credentials for high availability"
spec:
  # HSM path is automatically set to the metadata.name (ha-database-credentials)
  parentRef:
    name: controller-manager
    namespace: hsm-secrets-operator-system
  
  # Enable auto-sync for HA
  autoSync: true
  
  # More frequent sync for critical secrets
  syncInterval: 180  # 3 minutes

---
# Deployment using HA secrets
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ha-database-app
  namespace: default
spec:
  replicas: 3  # Multiple replicas for HA
  selector:
    matchLabels:
      app: ha-database-app
  template:
    metadata:
      labels:
        app: ha-database-app
    spec:
      # Spread across nodes for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ha-database-app
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: app
        image: postgres:13-alpine
        env:
        # Use HA-backed secrets
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: ha-database-credentials
              key: database_name
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: ha-database-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ha-database-credentials
              key: password
        
        # Health checks for HA
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi