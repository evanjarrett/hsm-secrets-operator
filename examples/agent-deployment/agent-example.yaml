# Complete example showing HSM agent pod deployment
# This demonstrates the full flow from HSMDevice discovery to agent-based secret operations

---
# Step 1: Create PIN secret for HSM authentication
apiVersion: v1
kind: Secret
metadata:
  name: pico-hsm-pin
  namespace: default
type: Opaque
data:
  pin: MTIzNDU2  # base64 encoded "123456"

---
# Step 2: Configure HSMDevice for discovery and agent deployment
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMDevice
metadata:
  name: pico-hsm-main
  namespace: default
  labels:
    hsm-type: pico
    environment: production
spec:
  # Device type - uses well-known specifications
  deviceType: PicoHSM
  
  # Discovery configuration
  discovery:
    usb:
      vendorId: "20a0"
      productId: "4230"
      # Optional: target specific device by serial number
      # serialNumber: "PICO123456"
  
  # PKCS#11 configuration for agent pods
  pkcs11:
    libraryPath: "/usr/local/lib/libsc-hsm-pkcs11.so"
    slotId: 0
    pinSecret:
      name: "pico-hsm-pin"
      key: "pin"
      namespace: "default"
    tokenLabel: "PicoHSM-Production"
  
  # Optional: restrict to specific nodes
  nodeSelector:
    hsm-enabled: "true"
    node-type: "worker"
  
  # Maximum devices to discover (usually 1 for production)
  maxDevices: 1

---
# Step 3: Create HSMSecret that will trigger agent deployment
apiVersion: hsm.j5t.io/v1alpha1
kind: HSMSecret
metadata:
  name: database-credentials  
  namespace: default
  labels:
    app: myapp
    tier: database
spec:
  # Path on HSM where secret is stored
  
  # Name of Kubernetes Secret to create/sync
  secretName: "database-credentials"
  
  # Enable automatic synchronization
  autoSync: true
  
  # Sync every 5 minutes (300 seconds)
  syncInterval: 300
  
  # Secret type (default: Opaque)
  secretType: "Opaque"

---
# Step 4: Example application using the synced secret
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database-app
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database-app
  template:
    metadata:
      labels:
        app: database-app
    spec:
      containers:
      - name: app
        image: nginx:1.21
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials  # Synced from HSM
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials  # Synced from HSM  
              key: password
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials  # Synced from HSM
              key: host
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
# Optional: Service to expose the application
apiVersion: v1
kind: Service
metadata:
  name: database-app-service
  namespace: default
spec:
  selector:
    app: database-app
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP